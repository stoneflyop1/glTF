// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson3054bb90DecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *Technique) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Parameters = make(map[string]TechniqueParameters)
				} else {
					out.Parameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 TechniqueParameters
					(v1).UnmarshalEasyJSON(in)
					(out.Parameters)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(map[string]TechniqueAttribute)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 TechniqueAttribute
					v2 = in.Interface()
					(out.Attributes)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "program":
			out.Program = GlTFid(in.String())
		case "uniforms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Uniforms = make(map[string]TechniqueUniform)
				} else {
					out.Uniforms = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 TechniqueUniform
					v3 = in.Interface()
					(out.Uniforms)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "states":
			(out.States).UnmarshalEasyJSON(in)
		case "name":
			out.Name = string(in.String())
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson3054bb90EncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in Technique) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"parameters\":")
	if in.Parameters == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in.Parameters {
			if !v4First {
				out.RawByte(',')
			}
			v4First = false
			out.String(string(v4Name))
			out.RawByte(':')
			(v4Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"attributes\":")
	if in.Attributes == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.Attributes {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v5Value))
		}
		out.RawByte('}')
	}
	if in.Program != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"program\":")
		out.String(string(in.Program))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uniforms\":")
	if in.Uniforms == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in.Uniforms {
			if !v6First {
				out.RawByte(',')
			}
			v6First = false
			out.String(string(v6Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v6Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"states\":")
	(in.States).MarshalEasyJSON(out)
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Technique) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3054bb90EncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Technique) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3054bb90EncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Technique) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3054bb90DecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Technique) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3054bb90DecodeGithubComSturfeeincGlTF(l, v)
}
