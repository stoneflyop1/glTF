// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson3213b127DecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *Material) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "technique":
			out.Technique = GlTFid(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Values = make(map[string]MaterialValues)
				} else {
					out.Values = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 MaterialValues
					v1 = in.Interface()
					(out.Values)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "name":
			out.Name = string(in.String())
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson3213b127EncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in Material) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Technique != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"technique\":")
		out.String(string(in.Technique))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"values\":")
	if in.Values == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Values {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v2Value))
		}
		out.RawByte('}')
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Material) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3213b127EncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Material) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3213b127EncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Material) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3213b127DecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Material) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3213b127DecodeGithubComSturfeeincGlTF(l, v)
}
