// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonCdfae1c8DecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *Node) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "translation":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Translation = make([]float64, 0, 8)
			} else {
				out.Translation = nil
			}
			for !in.IsDelim(']') {
				var v1 float64
				v1 = float64(in.Float64())
				out.Translation = append(out.Translation, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "skin":
			out.Skin = GlTFid(in.String())
		case "jointName":
			out.JointName = GlTFid(in.String())
		case "matrix":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Matrix = make([]float64, 0, 8)
			} else {
				out.Matrix = nil
			}
			for !in.IsDelim(']') {
				var v2 float64
				v2 = float64(in.Float64())
				out.Matrix = append(out.Matrix, v2)
				in.WantComma()
			}
			in.Delim(']')
		case "rotation":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Rotation = make([]float64, 0, 8)
			} else {
				out.Rotation = nil
			}
			for !in.IsDelim(']') {
				var v3 float64
				v3 = float64(in.Float64())
				out.Rotation = append(out.Rotation, v3)
				in.WantComma()
			}
			in.Delim(']')
		case "scale":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Scale = make([]float64, 0, 8)
			} else {
				out.Scale = nil
			}
			for !in.IsDelim(']') {
				var v4 float64
				v4 = float64(in.Float64())
				out.Scale = append(out.Scale, v4)
				in.WantComma()
			}
			in.Delim(']')
		case "camera":
			out.Camera = GlTFid(in.String())
		case "children":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Children = make([]GlTFid, 0, 4)
			} else {
				out.Children = nil
			}
			for !in.IsDelim(']') {
				var v5 GlTFid
				v5 = GlTFid(in.String())
				out.Children = append(out.Children, v5)
				in.WantComma()
			}
			in.Delim(']')
		case "skeletons":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Skeletons = make([]GlTFid, 0, 4)
			} else {
				out.Skeletons = nil
			}
			for !in.IsDelim(']') {
				var v6 GlTFid
				v6 = GlTFid(in.String())
				out.Skeletons = append(out.Skeletons, v6)
				in.WantComma()
			}
			in.Delim(']')
		case "meshes":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Meshes = make([]GlTFid, 0, 4)
			} else {
				out.Meshes = nil
			}
			for !in.IsDelim(']') {
				var v7 GlTFid
				v7 = GlTFid(in.String())
				out.Meshes = append(out.Meshes, v7)
				in.WantComma()
			}
			in.Delim(']')
		case "name":
			out.Name = string(in.String())
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"translation\":")
	out.RawByte('[')
	for v8, v9 := range in.Translation {
		if v8 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(v9))
	}
	out.RawByte(']')
	if in.Skin != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"skin\":")
		out.String(string(in.Skin))
	}
	if in.JointName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"jointName\":")
		out.String(string(in.JointName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"matrix\":")
	out.RawByte('[')
	for v10, v11 := range in.Matrix {
		if v10 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(v11))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rotation\":")
	out.RawByte('[')
	for v12, v13 := range in.Rotation {
		if v12 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(v13))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scale\":")
	out.RawByte('[')
	for v14, v15 := range in.Scale {
		if v14 > 0 {
			out.RawByte(',')
		}
		out.Float64(float64(v15))
	}
	out.RawByte(']')
	if in.Camera != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"camera\":")
		out.String(string(in.Camera))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"children\":")
	out.RawByte('[')
	for v16, v17 := range in.Children {
		if v16 > 0 {
			out.RawByte(',')
		}
		out.String(string(v17))
	}
	out.RawByte(']')
	if len(in.Skeletons) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"skeletons\":")
		out.RawByte('[')
		for v18, v19 := range in.Skeletons {
			if v18 > 0 {
				out.RawByte(',')
			}
			out.String(string(v19))
		}
		out.RawByte(']')
	}
	if len(in.Meshes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meshes\":")
		out.RawByte('[')
		for v20, v21 := range in.Meshes {
			if v20 > 0 {
				out.RawByte(',')
			}
			out.String(string(v21))
		}
		out.RawByte(']')
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComSturfeeincGlTF(l, v)
}
