// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson5969df52DecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *TechniqueStates) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enable":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Enable = make([]int, 0, 8)
			} else {
				out.Enable = nil
			}
			for !in.IsDelim(']') {
				var v1 int
				v1 = int(in.Int())
				out.Enable = append(out.Enable, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "functions":
			(out.Functions).UnmarshalEasyJSON(in)
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson5969df52EncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in TechniqueStates) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enable\":")
	out.RawByte('[')
	for v2, v3 := range in.Enable {
		if v2 > 0 {
			out.RawByte(',')
		}
		out.Int(int(v3))
	}
	out.RawByte(']')
	if true {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"functions\":")
		(in.Functions).MarshalEasyJSON(out)
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TechniqueStates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5969df52EncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TechniqueStates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5969df52EncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TechniqueStates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5969df52DecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TechniqueStates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5969df52DecodeGithubComSturfeeincGlTF(l, v)
}
