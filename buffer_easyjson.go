// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson39e9ff6DecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *Buffer) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uri":
			out.Uri = string(in.String())
		case "byteLength":
			out.ByteLength = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson39e9ff6EncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in Buffer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Uri != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uri\":")
		out.String(string(in.Uri))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"byteLength\":")
	out.Int(int(in.ByteLength))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Buffer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39e9ff6EncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Buffer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39e9ff6EncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Buffer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39e9ff6DecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Buffer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39e9ff6DecodeGithubComSturfeeincGlTF(l, v)
}
