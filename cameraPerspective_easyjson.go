// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package glTF

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson522fe41bDecodeGithubComSturfeeincGlTF(in *jlexer.Lexer, out *CameraPerspective) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aspectRatio":
			out.AspectRatio = float64(in.Float64())
		case "yfov":
			out.Yfov = float64(in.Float64())
		case "zfar":
			out.Zfar = float64(in.Float64())
		case "znear":
			out.Znear = float64(in.Float64())
		case "extensions":
			out.Extensions = in.Interface()
		case "extras":
			out.Extras = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson522fe41bEncodeGithubComSturfeeincGlTF(out *jwriter.Writer, in CameraPerspective) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AspectRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"aspectRatio\":")
		out.Float64(float64(in.AspectRatio))
	}
	if in.Yfov != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"yfov\":")
		out.Float64(float64(in.Yfov))
	}
	if in.Zfar != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"zfar\":")
		out.Float64(float64(in.Zfar))
	}
	if in.Znear != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"znear\":")
		out.Float64(float64(in.Znear))
	}
	if in.Extensions != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extensions\":")
		out.Raw(json.Marshal(in.Extensions))
	}
	if in.Extras != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"extras\":")
		out.Raw(json.Marshal(in.Extras))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraPerspective) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson522fe41bEncodeGithubComSturfeeincGlTF(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraPerspective) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson522fe41bEncodeGithubComSturfeeincGlTF(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraPerspective) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson522fe41bDecodeGithubComSturfeeincGlTF(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraPerspective) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson522fe41bDecodeGithubComSturfeeincGlTF(l, v)
}
